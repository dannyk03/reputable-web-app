# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @upper on FIELD_DEFINITION

type Transaction {
  from: String!
  to: String!
  amount: Int!
}

type UserMetaData {
  tokens: Int!
  transactions: Transaction
}

type User {
  created_at: DateTime!
  email: String!
  email_verified: Boolean!
  picture: String
  name: String!
  user_id: String!
  user_metadata: UserMetaData
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Comment"""
type Comment {
  createdAt: DateTime
  updatedAt: DateTime
  _id: ID
  author: User
  replyTo: ID
  text: String
  experiment: ID
  replies: [Comment!]
}

type Tip {
  userId: String!
  amount: Int!
}

type ExperimentResultMarker {
  name: String!
  unit: String!
  slug: String!
  more_is_better: Boolean!
}

type ResultHistory {
  date: DateTime!
  markerValue: Float!
  imageLink: String!
  prettified: String
}

type MarkerValueChange {
  type: MarkerValueChangeType!
  percentage: Float!
  value: Float!
}

enum MarkerValueChangeType {
  POSITIVE
  NEGATIVE
}

type ExperimentResult {
  marker: ExperimentResultMarker!
  history: [ResultHistory!]!
  lastChange: MarkerValueChange
}

"""experiment"""
type Experiment {
  createdAt: DateTime
  updatedAt: DateTime
  _id: ID
  title: String!
  status: ExperimentStatus!
  createdBy: User!
  communities: [String!]!
  description: String!
  results: [ExperimentResult!]!
  startDate: DateTime!
  endDate: DateTime!
  tips: [Tip!]
  comments: [Comment!]!
}

enum ExperimentStatus {
  ACTIVE
  RESULTS_PENDING
  IN_DESIGN
  CLOSED
}

type MessageResponse {
  message: String!
}

type Query {
  experiments: [Experiment!]!
  experiment(_id: String!): Experiment!
  comments: [Comment!]!
  comment(_id: String!): Comment!
  users: [User!]!
}

type Mutation {
  createExperiment(experiment: CreateExperimentInput!): Experiment!
  updateExperiment(_id: String!, experiment: UpdateExperimentInput!): Experiment!
  removeExperiment(id: Int!): Experiment!
  createComment(createCommentInput: CreateCommentInput!): Comment!
  updateComment(_id: String!, comment: UpdateCommentInput!): Comment!
  removeComment(_id: String!): Comment!
  makeTransaction(from: String!, to: String!, amount: Float!): MessageResponse!
}

input CreateExperimentInput {
  title: String!
  description: String!
  startDate: DateTime!
  endDate: DateTime!
  createdBy: String!
}

input UpdateExperimentInput {
  title: String!
}

input CreateCommentInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateCommentInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}